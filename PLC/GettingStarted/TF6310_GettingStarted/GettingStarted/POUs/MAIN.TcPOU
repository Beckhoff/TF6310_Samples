<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.5">
  <POU Name="MAIN" Id="{572507de-a44a-4a7e-b7eb-52f2373576ea}" SpecialFunc="None">
    <Declaration><![CDATA[PROGRAM MAIN
VAR
	bInit: BOOL := TRUE;
	fbSocketCloseAll: FB_SocketCloseAll; 
	bSocketCloseError: BOOL;
	nSocketCloseError: UDINT;
	
	fbTcpClient1					: FB_TCPClient;
		sClient1SendData			: STRING(255);
		nServer1Port				: UDINT 				:= 12000;
		sServer1Host				: T_IPv4Addr 			:= '';
		bStartClient1Communication	: BOOL 					:= TRUE;
		tClient1CycleTime			: TIME 					:= T#0.5S;
		bClient1SendTrigger			: BOOL;
		bClient1Connected			: BOOL;
		sClient1ReceivedData		: STRING(255);
		bClient1Busy				: BOOL;
		bClientError1				: BOOL;
		nClient1ErrorID1			: UDINT;		
		
	fbTcpEchoServer1				: FB_TCPServer;
		sServerReceivedData			: STRING(255);
		bStartServer1Communication	: BOOL 					:= TRUE;
		bServer1Connected			: BOOL;
		sServerData					: STRING(255);
		bServer1Busy				: BOOL;
		bServer1Error				: BOOL;
		nServer1ErrorID				: UDINT;
	
	bAutogenerateData				: BOOL 					:= TRUE;
	fbTimer1						: TON;
	sBufferData						: STRING 				:= 'TestString No.';
	nCnt							: UDINT;
	
// Optional second Client and Server
(*	fbTcpClient2					: FB_TCPClient;
		sClient2SendData			: STRING(255)			:= 'TestString123';
		sClient2ReceivedData		: STRING(255);			
	fbTcpServer2					: FB_TCPServer;
		sServer2Data				: STRING(255); *)
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[IF bInit THEN 				// Init Step to close all sockets after login PLC with  downlaod
	fbSocketCloseAll(
		sSrvNetId:= '', 
		bExecute:= TRUE, 
		tTimeout:= T#3S, 
		bBusy=> , 
		bError=> bSocketCloseError, 
		nErrId=> nSocketCloseError);
	IF NOT (fbSocketCloseAll.bBusy OR fbSocketCloseAll.bError) THEN
		bInit := FALSE;
		fbSocketCloseAll(bExecute:= FALSE);
	END_IF
ELSE
	
	fbTcpClient1(
		nRemotePort:= nServer1Port, 								// Server port
		sRemoteHost:= sServer1Host, 								// Server IP (empty for local communication)
		bStartCommunication:= bStartClient1Communication, 			// Start communication, when FALSE, connection is closed
		sSendData:= sClient1SendData, 								// Data that are sent to the server
		tCycleTimeSend:= (*tClient1CycleTime*), 						// Time for cyclic sending
		bSendTrigger:= fbTimer1.Q,							// Trigger to send one telegramm manually 
		bConnected => bClient1Connected,							// Switches to TRUE when Client is connected to a server
		sReceivedData=> sClient1ReceivedData,						// Data that are received
		bBusy=> bClient1Busy, 
		bError=> bClientError1, 
		nErrorID=> nClient1ErrorID1, ); 
	
	IF bAutogenerateData AND bClient1Connected THEN
		fbTimer1(IN:= NOT fbTimer1.Q, PT:= tClient1CycleTime, Q=> , ET=> );
		IF fbTimer1.Q  THEN
			sClient1SendData := Concat(sBufferData, UDINT_TO_STRING(nCnt));
			nCnt := nCnt + 1;
		END_IF
	END_IF 
		
	fbTcpEchoServer1(
		sLocalHost:= '', 											// Server IP Adress
		nLocalPort:= nServer1Port, 									// Server port
		bStartCommunication:= bStartServer1Communication, 			// Allow Client-connection or close connection
		bConnected => bServer1Connected,							// Client connection is valid
		sSendData => sServerData,
		bBusy=> bServer1Busy, 
		bError=> bServer1Error, 
		nErrorID=> nServer1ErrorID);
	
	// Optional second Client and Server
	
(*	fbTcpClient2(
		sRemoteHost:= '', 
		nRemotePort:= 12001, 
		sSendData:= sClient2SendData, 
		bStartCommunication:= TRUE, 
		tCycleTimeSend:= T#2S, 
		bSendTrigger:= ,
		bConnected => , 
		sReceivedData=> sClient2ReceivedData, 
		nErrorID=> , 
		bError=> , 
		bBusy=> );
		
	fbTcpServer2(
		sLocalHost:= '', 
		nLocalPort:= 12001, 
		bStartCommunication:= TRUE, 
		sSendData => sServer2Data, 
		bBusy=> , 
		bError=> , 
		nErrorID=> ); *)
END_IF]]></ST>
    </Implementation>
    <LineIds Name="MAIN">
      <LineId Id="211" Count="9" />
      <LineId Id="271" Count="0" />
      <LineId Id="221" Count="0" />
      <LineId Id="210" Count="0" />
      <LineId Id="267" Count="0" />
      <LineId Id="8" Count="0" />
      <LineId Id="38" Count="1" />
      <LineId Id="41" Count="0" />
      <LineId Id="288" Count="0" />
      <LineId Id="42" Count="0" />
      <LineId Id="48" Count="0" />
      <LineId Id="167" Count="0" />
      <LineId Id="43" Count="0" />
      <LineId Id="79" Count="0" />
      <LineId Id="44" Count="1" />
      <LineId Id="281" Count="0" />
      <LineId Id="287" Count="0" />
      <LineId Id="282" Count="4" />
      <LineId Id="12" Count="0" />
      <LineId Id="280" Count="0" />
      <LineId Id="67" Count="0" />
      <LineId Id="173" Count="0" />
      <LineId Id="68" Count="1" />
      <LineId Id="174" Count="0" />
      <LineId Id="276" Count="0" />
      <LineId Id="72" Count="1" />
      <LineId Id="10" Count="0" />
      <LineId Id="172" Count="0" />
      <LineId Id="103" Count="8" />
      <LineId Id="170" Count="0" />
      <LineId Id="112" Count="2" />
      <LineId Id="102" Count="0" />
      <LineId Id="115" Count="0" />
      <LineId Id="117" Count="0" />
      <LineId Id="126" Count="0" />
      <LineId Id="125" Count="0" />
      <LineId Id="119" Count="0" />
      <LineId Id="121" Count="2" />
      <LineId Id="116" Count="0" />
      <LineId Id="133" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>